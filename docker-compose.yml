services:

  api-gateway:
    container_name: api-gateway
    image: api-gateway:1.0.0
    build:
      context: .
      dockerfile: ./backend/api-gateway/api_gateway.dockerfile
    ports:
      - 8080:8080
    environment:
      - JWT_SECRET=your-secret-key
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=yourredispassword
    volumes:
      - ./backend/api-gateway:/app
    depends_on:
      - redis

  domain-service:
    container_name: domain-service
    build:
      context: ./backend/domain-service
      dockerfile: domain-service.dockerfile
    ports:
      - "5000:5000"
    environment:
      - DATABASE_URL=postgresql://user:password@db/domain_service
      - SECRET_KEY=your_secret_key_here
      - FLASK_ENV=development
      - DEBUG=True
      - RABBITMQ_HOST=rabbitmq
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  dns-service:
    container_name: dns-service
    build:
      context: ./backend/dns-service
      dockerfile: dns-service.dockerfile
    ports:
      - "5001:5001"
    environment:
      - DATABASE_URL=postgresql://user:password@db/dns_service
      - SECRET_KEY=your_secret_key_here
      - FLASK_ENV=development
      - FLASK_DEBUG=1
      - DEBUG=True
      - RABBITMQ_HOST=rabbitmq
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  whois-service:
    container_name: whois-service
    build:
      context: ./backend/whois-service
      dockerfile: whois-service.dockerfile
    ports:
      - "5002:5002"
    environment:
      - DATABASE_URL=postgresql://user:password@db/whois_service
      - SECRET_KEY=your_secret_key_here
      - FLASK_ENV=development
      - FLASK_DEBUG=1
      - DEBUG=True
      - RABBITMQ_HOST=rabbitmq
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  notification-service:
    container_name: notification-service
    build:
      context: ./backend/notification-service
      dockerfile: notification-service.dockerfile
    ports:
      - "5003:5003"
    environment:
      - DATABASE_URL=postgresql://user:password@db/notification_service
      - SECRET_KEY=your_secret_key_here
      - FLASK_ENV=development
      - FLASK_DEBUG=1
      - DEBUG=True
      - RABBITMQ_HOST=rabbitmq
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  frontend:
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: frontend.dockerfile
    ports:
      - "3010:3010"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    environment:
      - NODE_ENV=development
    command: npm run dev

  db:
    container_name: dm-db
    image: postgres:13
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    environment:
      - POSTGRES_DB=dns_service
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
    command: >
      bash -c "
        chmod +x /docker-entrypoint-initdb.d/init-db.sh &&
        docker-entrypoint.sh postgres
      "
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d whois_service"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq

  redis:
    image: redis:6.2-alpine
    container_name: redis
    restart: always
    ports:
      - '6379:6379'
    command: redis-server --save 20 1 --loglevel warning --requirepass yourredispassword
    volumes:
      - redis_data:/data

volumes:
  postgres_data:
  rabbitmq_data:
  redis_data:
