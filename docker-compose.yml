services:

  domain-service:
    container_name: domain-service
    build:
      context: ./backend/domain-service
      dockerfile: domain-service.dockerfile
    ports:
      - "5000:5000"
    environment:
      - DATABASE_URL=postgresql://user:password@db/domain_service
      - SECRET_KEY=your_secret_key_here
      - FLASK_ENV=development
      - DEBUG=True
      - RABBITMQ_HOST=rabbitmq
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  dns-service:
    container_name: dns-service
    build:
      context: ./backend/dns-service
      dockerfile: dns-service.dockerfile
    ports:
      - "5001:5001"
    environment:
      - DATABASE_URL=postgresql://user:password@db/dns_service
      - SECRET_KEY=your_secret_key_here
      - FLASK_ENV=development
      - DEBUG=True
      - RABBITMQ_HOST=rabbitmq
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  db:
    container_name: dm-db
    image: postgres:13
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=dns_service
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d dns_service"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
